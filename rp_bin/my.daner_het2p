#!/usr/bin/env perl
use strict;

my $version = "1.0.0";
my $progname = $0;


###################################################
## creates a subfile with filter on column (usually p)
######################################################

my $colp = 10;
my $colhp = -1;
my $coldf = -1;
#my $th = 3;


##### help message
my $usage = "
Usage : $progname [options] file

version: $version

  --help     print this help message and exit

 works with gzipped files (default for daner-file)
 exchanges p_value with het_p_value

 created by Stephan Ripke 2012 at MGH, Boston, MA
 
";


my $out_file = "NOFILE";

use Getopt::Long;
GetOptions( 

    "help"=> \my $help,
#    "col=i"=> \ $coln,
#    "th=i"=> \ $th,
#    "outfile=s"=> \ $out_file,
    );

die $usage if $help;
die $usage if (@ARGV != 2);


my $in_file = $ARGV[0];
my $out_file = $ARGV[1];
#if ($out_file eq "NOFILE") {
#    $out_file = $in_file.".p$th.gz";
#}

my $out_file_tmp = $out_file.".tmp";


#my $lth;
#if ($th == -1) {
#    $lth = 5e-08;
#}
#else {
#    $lth = 10 ** (-$th);
#}

print "$in_file\n$out_file\n";

##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}



###################################################
###  system call with test if successfull
###################################################
sub mysystem(){
    my ($systemstr)="@_";
    system($systemstr);
    my $status = ($? >> 8);
    die "$systemstr\n->system call failed: $status" if ($status != 0);
}


use lib $ENV{rp_perlpackages};
use Compress::Zlib ;


###############################
# BEGIN
#####################################

my $inz = gzopen("$in_file", "rb")  or die "Cannot open $in_file\n" ;
my $ouz = gzopen("$out_file_tmp", "wb")  or die "Cannot open $out_file_tmp\n" ;

$inz->gzreadline(my $head);




my $ouz_head;
my @cells = @{&split_line_ref(\$head)};
#print "head for hetP: ".$cells[$colhp]."\n";
foreach my $cc (0..$#cells) {
    if ($cells[$cc] eq "HetPVa") {
	$colhp = $cc;
    }
    if ($cells[$cc] eq "HetDf") {
	$coldf = $cc;
    }
#    print "cell: ".$cells[$cc]."\n";
}

if ($colhp == -1) {
    print "Error: no HetPVa found in header\n";
    exit;
}

if ($coldf == -1) {
    print "Error: no HetDf found in header\n";
    exit;
}

$cells[$colp] = "HetPVa";
$cells[$colhp] = "P";



$ouz->gzwrite("@cells\n") ;
#print "end hed\n";

my $nin = 0;
my $nout = 0;
my $ns=0;
my $line;
while ($inz->gzreadline($line)){
    my @cells = @{&split_line_ref(\$line)};
    if (@cells < 17) {
	$ns++;
	print "not enough cells at:\n$head\n$line\n" ;
	next;

#	exit;
    }
    if ($cells[$coldf] == 0) {
	next;
    }
    my $tmp_p = $cells[$colp];
    $cells[$colp] = $cells[$colhp];
    $cells[$colhp] = $tmp_p;
    my $oline = "@cells\n";
#    $nin++;
#    print "$cells[$coln]\n";
#    if ($cells[$coln] < $lth) {
    $ouz->gzwrite($oline) ;
#	$nout++;
#    }
}
$ouz -> gzclose();
$inz -> gzclose();

&mysystem ("mv $out_file_tmp $out_file");

print "done\n";
print "$ns SNPs without het-p\n";
