#!/usr/bin/env perl
use strict;

my $version = "1.3.0";
my $progname = $0;
$progname =~ s!^.*/!!;


##### help message
my $usage = "
Usage : $progname phased_impute_file

version: $version

##  --exclude STRING    SNPs to exclude, names in second column
  --out STRING        outname
  --help              print this message and exit
  --chr INT           chromosome (important for annotation)

 created by Stephan Ripke 2008 at MGH, Boston, MA
 in the frame of the PGC

";



use Getopt::Long;
GetOptions( 

    "help"=> \my $help,
    "exclude=s"=> \my $excl,
    "outname=s"=> \my $outname,
    "chr=i"=> \my $chr,

    );

die ($usage) if $help;
die ($usage) unless $chr;


die "$usage" if (@ARGV != 1);


my $max_allele_n = 13;


##########################################
# subroutine to split a plink-output-line
##########################################

sub split_win_line {
    my ($line)=@_;
    chomp($line);
    $line =~ s/\r//g;
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
}


##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}




###################################################
###  system call with test if successfull
###################################################

sub mysystem(){
    my ($systemstr)="@_";
    system($systemstr);
    my $status = ($? >> 8);
    die "$systemstr\n->system call failed: $status" if ($status != 0);
}


##########################################
# subroutine to split a plink-output-line
##########################################

sub split_line_old {
    my ($line)=@_;
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
}




############################################
######### BEGIN
########################################

my %ex_snps;

if ($excl) {
    die $!."($excl)" unless open FILE, "< $excl";
    while (my $line = <FILE>){
	my @cells = @{&split_line_ref(\$line)};
	$ex_snps{$cells[1]} = 1;
#	print "$cells[1]\n";
    }
    close FILE;
}


my $iphased = $ARGV[0];
my $ilegend = $iphased;
my $bphased = $iphased;

my $iroot = $iphased;
$iroot =~ s/.hap$//;


my $ilegend_ow = $iroot.".ow.legend";
my $iphased_ow = $iroot.".ow.hap";




#$ilegend =~ s/.haps$/.legend/;
#$bphased =~ s/.haps$/.phased/;

$ilegend =~ s/.hap$/.legend/;
$bphased =~ s/.hap$/.phased/;



if ($outname) {
    $bphased = $outname;
}

my %n_names ;  ### count snp_names
#my $ilegend_orig = $ilegend.".orig";
#my $ilegend_ow = ;
my $ilegend_ow_done = $ilegend_ow.".done";


##################################################
### analyze legend file
###  exclude multinames and annotate position
###################################################
my %snp_names ;

print "ilegend: $ilegend\n";

if (1) {
    print "work on overwrite\n";
    unless (-e $ilegend_ow_done) {
#   if (1) {
	print "overwork legend file\n";
#	&mysystem ("cp $ilegend $ilegend.orig");

	die "$! ($ilegend)" unless open IL, "< $ilegend";
	die "$! ($ilegend_ow)" unless open OL, "> $ilegend_ow";
	die "$! ($ilegend_ow.changes)" unless open OC, "> $ilegend_ow.changes";

	my $header = <IL>;
	print OL "$header";
	my $lc = 0;

	while (my $il_line = <IL>){
	    

	    my @lcells = @{&split_line_ref(\$il_line)};



	    my $snp = $lcells[0];
	    my $pos = $lcells[1];
	    my $a1 = $lcells[2];
	    my $a2 = $lcells[3];

#	    $a1 =~ s/<DEL>/D/;
#	    $a2 =~ s/<DEL>/D/;
	    



	    my @scells = split ':', $snp;
	    my $snpout = $scells[0];





	    if ($snpout =~ /rs[0-9]*/) {
#		print "rs: $snpout\n";
	    }
	    else {

#		print "chr: $chr\tpos:$pos\n";
#		exit;
		$snpout =~ s/^chr//;

		if ($snpout == $chr && $pos == $scells[1]) {
		    $snpout = "chr$chr:$pos";
		}
		else {

		    print OC "warning: odd snp_names in row $lc od $ilegend: $snpout\n";
#		    print "warning: odd snp_names in row $lc od $ilegend: $snpout, $pos, $chr, $scells[1]\n";

		}
		

#		print "nonrs: $snpout\n";
	    }

#	    print "snpout: $snpout\n";
#	    if ($snp eq ".") {
#		$snpout = "chr$chr:$pos";
#		print OC "warning: changing missing snp_name into $snpout\n";
#	    }

	    my $lcc = 0;
	    while (exists $snp_names{$snpout}) {
		print "warning: changing duplicate $snpout into $snpout"."m\n";
		print OC "warning: changing duplicate $snpout into $snpout"."m\n";
		$snpout .= "m";
		$lcc++;
		if ($lcc > 1000) {
		    print "Error: multi-snp-names, x1000, $snpout\n";
		    exit;
		}
	    }

	    print OL "$snpout";
	    print OL "\t$pos";
	    print OL "\t$a1";
	    print OL "\t$a2";

	    foreach (4..$#lcells) {
		print OL "\t$lcells[$_]";
	    }

	    print OL "\n";

	    $snp_names{$snpout} = 1;	    
	    
	}
	close IL;
	close OL;
	close OC;
	
	if (1) {	
	    &mysystem ("ln -s $iphased $iphased_ow");
	    &mysystem ("touch $ilegend_ow_done");
	}
    }
}
#exit;




##################################################
###  look for duplicates within each legend file
###################################################


if (0) {
print "analyze legend file\n";

die "$! ($ilegend_ow)" unless open IL, "< $ilegend_ow";

my $head = <IL>;

%snp_names =();

while (my $il_line = <IL>){

    my @lcells = @{&split_line_ref(\$il_line)};
    my $snp = $lcells[0];

    $snp =~ s/\W/_/g;
    $snp_names{$snp}++;

}

close IL;

my %multi_snps;
{
    my $my_error = 0;
    die "$! ($bphased.multi)" unless open BP, "> $bphased.multi.error";
    foreach my $sn (keys %snp_names) {
	if ($snp_names{$sn} > 1){
	    print "multi_error <$sn>: N = ".$snp_names{$sn}."\n";
	    print BP "multi_error <$sn>: N = ".$snp_names{$sn}."\n";
	    $my_error = 1;
	}
    }
    close BP;

    if ($my_error == 1){
	    print "strange multifiles, look in $bphased.multi.error\n";
	    exit;
    }
}


%snp_names = ();
}
#%snp_names_snp = ();
#exit;



##################################################
###  process
###################################################

print "write phased file\n";

die "$! ($iphased_ow)" unless open IP, "< $iphased_ow";
die "$! ($ilegend_ow)" unless open IL, "< $ilegend_ow";
die "$! ($bphased.tmp)" unless open BP, "> $bphased.tmp";
die "$! ($bphased.short)" unless open SH, "> $bphased.short";
die "$! ($bphased.renames)" unless open RE, "> $bphased.renames";


my $head = <IL>;

my %snp_names_dub ;



while (my $il_line = <IL>){

#    my @lcells = &split_line($il_line);
#    chomp($il_line);
#    $il_line =~ s/^[\s]+//g;
#    my @lcells=  split /\s+/, $il_line;
    my @lcells = @{&split_line_ref(\$il_line)};


    my $snp = $lcells[0];
    my $pos = $lcells[1];

#    $snp =~ s/\W/_/g;

#    unless ($lcells[4] eq "SNP") {
#	if (exists $multi_snps{$snp}) {
#	    print MU "$snp";
#	    $snp .= "_id";
#	    while (exists $snp_names_dub{$snp}){
#		$snp .= "_id";
#	    }
#	    print MU " $snp\n";
#	    $snp_names_dub{$snp} = 1;
#	}
 #   }



#    $snp =~ s/_/c/g;
#    print "$snp $pos\n";
#    sleep(1);


    my $osnp = "$chr-$pos";



    my $a1 = $lcells[2];
    my $a2 = $lcells[3];
    
#    if ($a1 eq "<DEL>") {
#	$a1 = "del";
 #   }
 #   if ($a2 eq "<DEL>") {
#	$a2 = "del";
 #   }


    my $a1_length = length($a1);
    my $a2_length = length($a2);




    if ($a1_length > $max_allele_n) {
#	print "$snp: a1 with length over $max_allele_n ($a1_length): $a1\n";
	my $a1_short = substr($a1,0,$max_allele_n);
	my $a1_add = $a1_length - $max_allele_n;
	$a1_short .= "+".$a1_add;
	print SH "shortened: $snp, $a1, $a1_short\n";
#	print "shortened: $snp, $a1, $a1_short\n";
	$a1 = $a1_short;
#	exit;
    }


    if ($a2_length > $max_allele_n) {
#	print "$snp: a2 with length over $max_allele_n ($a2_length): $a2\n";
	my $a2_short = substr($a2,0,$max_allele_n);
	my $a2_add = $a2_length - $max_allele_n;
	$a2_short .= "+".$a2_add;
	print SH "shortened: $snp, $a2, $a2_short\n";
#	print "shortened: $snp, $a2, $a2_short\n";
	$a2 = $a2_short;
#	exit;
    }


if ($a1 eq $a2) {

    print RE "$snp: (shortend) alleles same for a1 and a2, renamed into a and b: $a1\n";
    $a1 .= "a";
    $a2 .= "b";

#    exit;
}



    if (0) {
	if ($a1_length > 5 && $a2_length > 5) {
	    if ($a1_length == $a2_length) {
		print "$snp: Error: insertion and deletion together?\n";
		exit;
	    }
	}

	if ($a1_length > 1) {
	    $a1 = "I".$a1_length;
	    $a2 = "D";
	}
	if ($a2_length > 1) {
	    $a2 = "I".$a2_length;
	    $a1 = "D";
	}
    }



    if (1) {

	my $ip_line = <IP>;
	die "rownumber don't match" if ($ip_line eq "");

	my @pcells = @{&split_line_ref(\$ip_line)};

	print BP "$snp";       ### here with original
	print BP " $pos";

	foreach my $c (@pcells) {
	    if ($c == 0) {
		print BP " $a1";
	    }
	    elsif ($c == 1) {
		print BP " $a2";
	    }
	    else {
		die "unlvalid allele: $osnp";
#	    die "unlvalid allele: $snp";
	    }
	}
	print BP "\n";
    }
}

my $ip_line = <IP>;
die "rownumber don't match" if ($ip_line ne "");

close IP;
close BP;
close IL;
close SH;
close RE;

&mysystem ("wc -l $bphased.tmp > $bphased.count");

&mysystem ("mv $bphased.tmp $bphased");


print "success\n";
