#!/usr/bin/env perl

use strict;
use warnings;

#############################
# load utility functions
#############################

use FindBin;
use lib "$FindBin::Bin";
use Ricopili::Utils qw(trans);

#############################
# read config file
#############################

my $shloc = &trans("shloc");
my $p2loc = &trans("p2loc");
my $ealoc = "";


###########################################
##### help message
my $usage = "
Usage : my.preph --out BFILE --in BFILE --fam FAMFILE --gema GEMAFILE --multi INT

 --out STRING      name of out-bfile
 --in STRING       name of in-bfile (will create haps and legend)
 --gema STRING     gema-file
 --fam STRING      separate famfile with short ID names
 --multi INT       multithreading
 --chrX            for X chromosome
 --spliha INT      for splitter
 --eagle           use eagle instead of shapeit
 --nospli          do not perform second task (splitting into smaller chunks)

";

my $outname = "";
my $inname = "";
my $gemafile = "";
my $famfile = "";
my $multi = 0;
my $spliha = 0;

use Getopt::Long;
GetOptions( 

    "out=s"=> \ $outname,
    "in=s"=> \ $inname,
    "gema=s"=> \ $gemafile,
    "fam=s"=> \ $famfile,
    "multi=i"=> \ $multi,
    "spliha=i"=> \ $spliha,
    "chrX"=> \my $chrx,
    "eagle"=> \my $eagle_sw,
    "nospli"=> \my $nospli,
    );

if ($outname eq "" || $inname eq ""  || $gemafile eq "" || $famfile eq "" || $spliha == 0){
    print "$usage\n";
    die;
}

if ($eagle_sw) {
    $ealoc = &trans("ealoc");
}

unless (-e "$inname.bim") {
    print "error: no $inname.bim\n";
    exit;
}

#my $shapeit_bin = "shapeit.v2.r644.linux.x86_64";
my $shapeit_bin = "shapeit.v2.r837.linux.x86_64";
#my $eagle_bin = "eagle_v2.2a";
my $eagle_bin = "eagle";

my $xtxt = "";
if ($chrx) {
    $xtxt = "--chrX";
}

my $multi_txt = "";
if ($multi > 1 ) {
    $multi_txt = "--thread $multi";
    if ($eagle_sw) {
	$multi_txt = "--numThreads=$multi";
    }
}



system ("touch $outname.multi.$multi");
if (-e "$outname.fini") {
    system ("rm $outname.fini");
}

##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}


######################
# BEGIN
##############################

die $!."$outname.phase.cmd" unless open BC, "> $outname.phase.cmd";


my $sys_loc = "$shloc/$shapeit_bin --seed 123454 $xtxt --input-bed $inname.bed $inname.bim $famfile --output-max $outname.haps $outname.sample --output-log $outname.shape.log --input-map $gemafile $multi_txt > /dev/null";

if ($eagle_sw) {
    $gemafile =~ s/.txt$/.chr.txt/;
    $sys_loc = "$ealoc/$eagle_bin --bfile=$inname --geneticMapFile=$gemafile --outPrefix=$outname $multi_txt > $outname.log 2> $outname.loge";
}

my $sc = 0;
unless (-e "$outname.first.fini"){
    print "$sys_loc\n";
    $sc = system ($sys_loc) ;
    print BC "$sys_loc\n";
}


close BC;
### right now I don't check why it fails
if (0) {
    if ($sc != 0) {
	print "something went seriously wrong\n";
	my $sys_loc = "$p2loc/plink --memory 2000  --bfile $inname --out $inname.miss --missing";
	$sc = system ($sys_loc) ;


	die $!."($inname.miss.imiss)" unless open FILE, "< $inname.miss.imiss";
	my $line = <FILE>;
	while (my $line = <FILE>){
	    my @cells = @{&split_line_ref(\$line)};
	    if ($cells[5] > .8) {
		print "-------------------------------------------------------------\n";
		print "Error: found ID with high missing rate (th = 0.8): $cells[5] @cells\n";
		system ("touch $outname.first.error");
	    }
	}
	close FILE;


	exit;
    }
}


if ($sc == 0 ) {



    unless ($nospli) {    
	if ($eagle_sw) {
	    $sys_loc = "gunzip -c $outname.haps.gz > $outname.haps";
	    $sc = system ($sys_loc) ;
	}
	system ("touch $outname.first.fini");
	my $sys_loc2 = "splithap_1 --nhaps $spliha $outname.haps";
	
	
	
	die $!."$outname.split.cmd" unless open BC, "> $outname.split.cmd";
	print BC "$sys_loc2\n";
	close BC;
    

    
	print "$sys_loc2\n";
	#    exit;
	my $sc2 = system ($sys_loc2);
	if ($sc2 == 0 ) { 
	    system ("touch $outname.fini");
	}
    }
    else {
	system ("touch $outname.fini");
    }
    
}
else {
    print "job finished with error\n";
}






