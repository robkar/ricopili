#!/usr/bin/env perl
use strict;

my $version = "1.3.0";
my $progname = $0;
$progname =~ s!^.*/!!;

#############################
# load utility functions
#############################

use FindBin;
use lib "$FindBin::Bin";
use Ricopili::Utils qw(trans);

use lib $ENV{rp_perlpackages};
use Compress::Zlib ;



###############################################


##### help message
my $usage = "
Usage : $progname 

version: $version

  --vcf STRING       mandatory, gzipped file must exist
  --help              print this message and exit


 rewrites indels and mulitSNPnames in vcf file

 created by Stephan Ripke 2016 at MGH, Boston, MA
 in the frame of the PGC

";


use Getopt::Long;
GetOptions( 

    "help"=> \my $help,
    "vcf=s"=> \my $vcf_file,

    );

die ($usage) if $help;

die "$usage" if (@ARGV != 0);


##########################################
# subroutine to split a plink-output-line with references
##########################################

sub split_line_ref {
    my ($line)=${$_[0]};
    chomp($line);
    $line =~ s/^[\s]+//g;
    my @cols=  split /\s+/, $line;
    \@cols;
}




###################################################
###  system call with test if successfull
###################################################


sub mysystem(){
    my ($systemstr)="@_";
    system($systemstr);
    my $status = ($? >> 8);
    die "$systemstr\n->system call failed: $status" if ($status != 0);
}


###################################################
## check snpname
###################################################


sub csnp(){
    my ($cell)="@_";
    if ($cell =~ /;/) {
#	print "yes there is a semi: $cell\n";
	my @spl = split ';', $cell;
	return $spl[0];
    }
    else {
	return $cell;
    }
}




############################################
######### BEGIN
########################################




my $vcf_out = $vcf_file;
$vcf_out =~ s/.gz$//;
my $changes_out = $vcf_out.".rf.changes.gz";
$vcf_out .= ".rf.gz";





############################################
######### legend file
########################################

print "reformat vcf file ($vcf_file)\n";
print "target file ($vcf_out)\n";
print "changes file ($changes_out)\n";
#exit;


##################
## for reformat
my $tt=0;
my $snp_col = 2;
my $a1_col = 3;
my $a2_col = 4;

my %snpin;

my $igz = gzopen("$vcf_file", "rb")  or die "Cannot open file $vcf_file: $gzerrno\n" ;
my $ogz = gzopen("$vcf_out", "wb")  or die "Cannot open file $vcf_out: $gzerrno\n" ;
my $cgz = gzopen("$changes_out", "wb")  or die "Cannot open file $changes_out: $gzerrno\n" ;    
while ($igz->gzreadline(my $line)){

    if ($line =~ /^#/){
	$ogz->gzwrite($line);
	next;
    }

    chomp($line);

    my @cells = @{&split_line_ref(\$line)};

#    if ($tt++ == 5) {
#	last;
#    }


    my $changes_txt = "";

    #############################################
    ## refformat
    
    ## take only the first snp-name
    if ($cells[$snp_col] =~ /;/) {
	my @spl = split ';', $cells[$snp_col];
	$changes_txt = "changing $cells[$snp_col] to $spl[0]\n";
	$cells[$snp_col] = $spl[0];

    }

    while (exists $snpin{$cells[$snp_col]}) {
	$changes_txt .= "changing $cells[$snp_col] to $cells[$snp_col].m\n";
	$cells[$snp_col] .= "m";
    }
    $snpin{$cells[$snp_col]} = 1;

    ## check allele lengths
    if (length($cells[$a2_col]) > 1) {
	if (length($cells[$a1_col]) > 1) {
	    print "Error: a1 and a2 should not both be longer than 1 char ($cells[$snp_col]))\n";
	    exit;
	}
	$changes_txt .= "$cells[$snp_col] changing alleles to I,D\n";
	$cells[$a2_col] = "I";
	$cells[$a1_col] = "D";
    }
    
    ## check allele lengths
    if (length($cells[$a1_col]) > 1) {
	if (length($cells[$a2_col]) > 1) {
	    print "Error: a1 and a2 should not both be longer than 1 char ($cells[$snp_col]))\n";
	    exit;
	}
	$changes_txt .= "$cells[$snp_col] changing alleles to I,D\n";
	$cells[$a1_col] = "I";
	$cells[$a2_col] = "D";
    }
    
    $ogz->gzwrite("@cells\n");
    $cgz->gzwrite($changes_txt);


}
$igz->gzclose();
$ogz->gzclose();
$cgz->gzclose();





&mysystem ("touch $vcf_out.fini");

    

